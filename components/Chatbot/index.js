import React, { useState } from "react";
import ModalChatbot from "./modalChatbot";

const clientQuestions = [
  "–¢–∞–Ω—ã —Ç”©–ª”©–≤–ª”©–≥”©”©–Ω–∏–π –∑–æ—Ä–∏–ª–≥–æ?",
  "–¢–∞–Ω—ã –∑–æ—Ä–∏–ª—Ç–æ–¥ —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥?",
  "–¢–∞–Ω—ã “Ø–π–ª –∞–∂–∏–ª–ª–∞–≥–∞–∞–Ω—ã —á–∏–≥–ª—ç–ª",
  "–¢–∞–Ω—ã –±–æ–ª–æ–º–∂–∏—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∏–π–Ω —Ç”©—Å”©–≤?",
];

const Chatbot = () => {
  const [open, setOpen] = useState(false);
  const [messages, setMessages] = useState([
    {
      from: "bot",
      text: "–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É? –¢–∞ –ú–æ–Ω–≥–æ–ª—ã–Ω –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∏–π–Ω —Å–∞–ª–±–∞—Ä—ã–Ω –Ω—ç–≥–¥—Å—ç–Ω —Å–∏—Å—Ç–µ–º–¥ —Ö–æ–ª–±–æ–≥–¥–ª–æ–æ. –¢–∞–Ω–¥ —Ç—É—Å–ª–∞—Ö–∞–¥ –±—ç–ª—ç–Ω.–¢–∞ –∞—Å—É—É–ª—Ç –∞–∞ –∞—Å—É—É–Ω–∞ —É—É?",
    },
  ]);
  const [input, setInput] = useState("");
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [clientStep, setClientStep] = useState(0);
  const [clientAnswers, setClientAnswers] = useState([]);

  const faq = [
    {
      question: "–ú–æ–Ω–≥–æ–ª—ã–Ω —Ö–∞–º–≥–∏–π–Ω ”©–Ω–¥”©—Ä “Ø–∑—ç–ª—Ç—Ç—ç–π —Ç–µ–ª–µ–≤–∏–∑–∏–π–Ω —Å—É–≤–∞–≥ —é—É –≤—ç?",
      answer:
        "–ú–æ–Ω–≥–æ–ª—ã–Ω —Ö–∞–º–≥–∏–π–Ω –æ–ª–æ–Ω “Ø–∑—ç–≥—á—Ç—ç–π —Å—É–≤–∞–≥ –±–æ–ª –ë–æ–ª–æ–≤—Å—Ä–æ–ª –¢–í –±”©–≥”©”©–¥ –û—Ä–≥–∏–ª —Ü–∞–≥–∞–∞—Ä ”©–¥”©—Ä—Ç –¥—É–Ω–¥–∂–∞–∞—Ä 351,549 —Ö—ç—Ä—ç–≥–ª—ç–≥—á “Ø–∑–¥—ç–≥ –±–∞ –±—É—Å–∞–¥ —Ü–∞–≥–∞–∞—Ä ”©–¥”©—Ä—Ç –¥—É–Ω–¥–∂–∞–∞—Ä 158,658 —Ö—ç—Ä—ç–≥–ª—ç–≥—á “Ø–∑–¥—ç–≥. –ì—ç—Ö–¥—ç—ç —Ç—É—Ö–∞–π–Ω –¢–í-—ç—ç—Ä –≥–∞—Ä—á –±—É–π –®–æ—É –Ω—ç–≤—Ç—Ä“Ø“Ø–ª—ç–≥ –ö–∏–Ω–æ –∑—ç—Ä–≥—ç—ç—Å —Ö–∞–º–∞–∞—Ä–∞–Ω –±—É—Å–∞–¥ —Å—É–≤–≥–∏–π–Ω “Ø–∑—ç–ª—Ç –∏–ª“Ø“Ø ”©–Ω–¥”©—Ä –±–æ–ª–æ—Ö —Ç–æ—Ö–∏–æ–ª–¥–ª—É—É–¥ –±–∞–π–¥–∞–≥",
    },
    {
      question: "–¢”©–≤ —Ç–∞–ª–±–∞–π–Ω —É—Ä–¥ –±–∞–π—Ä–ª–∞—Ö –Ω–∏–π—Å–ª—ç–ª –¥—ç–ª–≥—ç—Ü–∏–π–≥ —Ö—ç–¥—ç–Ω —Ö“Ø–Ω “Ø–∑–¥—ç–≥ –≤—ç?",
      answer:
        "–ù–∏–π—Å–ª—ç–ª –¥—ç–ª–≥—ç—Ü–∏–π–Ω —É—Ä–¥—É—É—Ä ”©–¥”©—Ä—Ç –¥—É–Ω–¥–∂–∞–∞—Ä 85,156 –∞–≤—Ç–æ–º–∞—à–∏–Ω, 38,598 —è–≤–≥–∞–Ω –∑–æ—Ä—á–∏–≥—á ”©–Ω–≥”©—Ä–¥”©–≥ –±–∞ —Ç—ç–¥–Ω–∏–π 65 –æ—Ä—á–∏–º —Ö—É–≤—å –Ω—å –±—É—é—É 80,674 –æ—Ä—á–∏–º –Ω—å –¥—ç–ª–≥—ç—Ü—ç–Ω –¥—ç—ç—Ä —Ç–æ–≥–ª–æ–≥–¥–æ–∂ –±—É–π –¥“Ø—Ä—Å–∏–π–≥ —Ö–∞—Ä–¥–∞–≥. –•—ç—Ä—ç–≤ —Ç–∞ —ç–Ω—ç—Ö“Ø“Ø –¥—ç–ª–≥—ç—Ü—ç–Ω –¥—ç—ç—Ä —Å—É—Ä—Ç–∞–ª—á–∏–ª–≥–∞–∞ –±–∞–π—Ä—à—É—É–ª–∞—Ö–∞–∞—Ä —Ç”©–ª”©–≤–ª”©–∂ –±–∞–π–≥–∞–∞ –±–æ–ª 15 —Ö“Ø—Ä—Ç—ç–ª—Ö —Å–µ–∫-—ã–Ω —É—Ä—Ç—Ç–∞–π –≤–∏–¥–µ–æ–≥ ”©–¥—Ä–∏–π–Ω 420 —É–¥–∞–∞–≥–∏–π–Ω –¥–∞–≤—Ç–∞–º–∂—Ç–∞–π ”©–≥”©—Ö”©–¥ —Ç–æ—Ö–∏—Ä–æ–º–∂—Ç–æ–π",
    },
    {
      question: "–ß–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ —Ç”©–ª”©–≤–ª”©–≥”©”© –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∂ —á–∞–¥–∞—Ö —É—É?",
      answer:
        "–¢–∏–π–º—ç—ç —á–∞–¥–Ω–∞ –≥—ç—Ö–¥—ç—ç —Ç”©–ª”©–≤–ª”©–≥”©”© –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö—ã–Ω ”©–º–Ω”© —Ç–∞–Ω–∏–∞—Å —Ö—ç–¥—ç–Ω –∑“Ø–π–ª—Å–∏–π–≥ —Ç–æ–¥—Ä—É—É–ª–∞—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π. –¢–∞ —Ö–∞—Ä–∏—É–ª–∞—Ö–∞–¥ –±—ç–ª—ç–Ω “Ø“Ø?",
    },
    {
      question: clientQuestions[0], // here
      answer: "–ë–∞—è—Ä–ª–∞–ª–∞–∞ —Ç–∞–Ω—ã —Ç”©–ª”©–≤–ª”©–≥”©”© –±—ç–ª—ç–Ω –±–æ–ª–ª–æ–æ ",
    },
  ];  
// Call your backend endpoint to get OpenAI response
async function fetchAIResponse(message) {
  const response = await fetch('/api/chat', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ message }),
  });

  const data = await response.json();
  console.log('data==>', data); // This will log the backend response in your browser console
  return data.reply;
}
  
  const handleSend = async () => {
    if (!input.trim()) return;

    setMessages([...messages, { from: "user", text: input }]);

    // If in client question flow
    if (clientStep > 0 && clientStep <= clientQuestions.length) {
      const nextStep = clientStep + 1;
      setClientAnswers([...clientAnswers, input]);
      setTimeout(async () => {
        const found = faq.find(
      (f) => input.trim().toLowerCase() === f.question.toLowerCase()
    );
    if (found) {
      setMessages((msgs) => [
        ...msgs,
        { from: "bot", text: found.answer },
      ]);
    } else {
      // Call AI if not found in FAQ
      const aiReply = await fetchAIResponse(input);
      setMessages((msgs) => [
        ...msgs,
        { from: "bot", text: aiReply || "–£—É—á–ª–∞–∞—Ä–∞–π, —Ç–∞–Ω—ã –∞—Å—É—É–ª—Ç—ã–≥ –æ–π–ª–≥–æ—Å–æ–Ω–≥“Ø–π. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É." },
      ]);
    }
      }, 500);
      setInput("");
      return;
    }

    setTimeout(() => {
  // If bot just asked "–¢–∞ —Ö–∞—Ä–∏—É–ª–∞—Ö–∞–¥ –±—ç–ª—ç–Ω “Ø“Ø?" and client says "—Ç–∏–π–º"
  if (
    messages[messages.length - 1]?.text ===
      "–¢–∏–π–º—ç—ç —á–∞–¥–Ω–∞ –≥—ç—Ö–¥—ç—ç —Ç”©–ª”©–≤–ª”©–≥”©”© –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö—ã–Ω ”©–º–Ω”© —Ç–∞–Ω–∏–∞—Å —Ö—ç–¥—ç–Ω –∑“Ø–π–ª—Å–∏–π–≥ —Ç–æ–¥—Ä—É—É–ª–∞—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π. –¢–∞ —Ö–∞—Ä–∏—É–ª–∞—Ö–∞–¥ –±—ç–ª—ç–Ω “Ø“Ø?" &&
    input.trim().toLowerCase() === "—Ç–∏–π–º"
  ) {
    setMessages((msgs) => [
      ...msgs,
      { from: "bot", text: clientQuestions[0] },
    ]);
    setClientStep(1);
    setInput("");
    return; // Prevent fallback message
  }

  const found = faq.find(
    (f) => input.trim().toLowerCase() === f.question.toLowerCase()
  );
  setMessages((msgs) => [
    ...msgs,
    {
      from: "bot",
      text: found
        ? found.answer
        : "–£—É—á–ª–∞–∞—Ä–∞–π, —Ç–∞–Ω—ã –∞—Å—É—É–ª—Ç—ã–≥ –æ–π–ª–≥–æ—Å–æ–Ω–≥“Ø–π. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.",
    },
  ]);
  setInput("");
}, 500);
    setInput("");
  };

  return (
    <>
      {/* Floating Chatbot Button */}
      <button
        onClick={() => setOpen(true)}
        style={{
          position: "fixed",
          bottom: 30,
          right: 30,
          width: 60,
          height: 60,
          borderRadius: "50%",
          background: "#2196f3",
          color: "#fff",
          border: "none",
          boxShadow: "0 2px 8px #0002",
          fontSize: 28,
          zIndex: 1100,
          cursor: "pointer",
        }}
        aria-label="Chatbot">
        üí¨
      </button>

      {/* Modal Chatbot Window */}
      {open && (
        <div
          style={{
            position: "fixed",
            bottom: 100,
            right: 30,
            width: 340,
            background: "#fff",
            border: "1px solid #ccc",
            borderRadius: 12,
            boxShadow: "0 4px 24px #0003",
            zIndex: 1200,
            display: "flex",
            flexDirection: "column",
          }}>
          {/* Modal Header */}
          <div
            style={{
              padding: "12px 16px",
              borderBottom: "1px solid #eee",
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              background: "#2196f3",
              color: "#fff",
              borderTopLeftRadius: 12,
              borderTopRightRadius: 12,
            }}>
            <span>AllUNeed –ß–∞—Ç–±–æ—Ç</span>
            <button
              onClick={() => setOpen(false)}
              style={{
                background: "transparent",
                border: "none",
                color: "#fff",
                fontSize: 20,
                cursor: "pointer",
              }}
              aria-label="Close">
              √ó
            </button>
          </div>
          {/* Chat Content */}
          <div
            style={{ maxHeight: 300, overflowY: "auto", padding: 10, flex: 1 }}>
            {messages.map((msg, i) => (
              <div
                key={i}
                style={{
                  textAlign: msg.from === "user" ? "right" : "left",
                  margin: "8px 0",
                }}>
                <span
                  style={{
                    background: msg.from === "user" ? "#e0f7fa" : "#f1f8e9",
                    padding: "6px 12px",
                    borderRadius: 16,
                    display: "inline-block",
                  }}>
                  {msg.text}
                </span>
              </div>
            ))}
          </div>
          {/* Input */}
          <div style={{ display: "flex", borderTop: "1px solid #eee" }}>
            <input
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && handleSend()}
              style={{ flex: 1, border: "none", padding: 8, outline: "none" }}
              placeholder="–ë–∏—á–∏—Ö..."
            />
            <button
              onClick={handleSend}
              style={{
                padding: "0 16px",
                border: "none",
                background: "#2196f3",
                color: "#fff",
                borderRadius: "0 0 12px 0",
              }}>
              –ò–ª–≥—ç—ç—Ö
            </button>
          </div>
        </div>
      )}
      <ModalChatbot open={isModalOpen} onClose={() => setIsModalOpen(false)} />
    </>
  );
};

export default Chatbot;
